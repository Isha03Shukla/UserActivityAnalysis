CREATE TABLE users (
    USER_ID INT PRIMARY KEY,
    USER_NAME VARCHAR(20) NOT NULL,
    USER_STATUS VARCHAR(20) NOT NULL
);

CREATE TABLE logins (
    USER_ID INT,
    LOGIN_TIMESTAMP DATETIME NOT NULL,
    SESSION_ID INT PRIMARY KEY,
    SESSION_SCORE INT,
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);

-- Users Table
INSERT INTO USERS VALUES (1, 'Alice', 'Active');
INSERT INTO USERS VALUES (2, 'Bob', 'Inactive');
INSERT INTO USERS VALUES (3, 'Charlie', 'Active');
INSERT INTO USERS  VALUES (4, 'David', 'Active');
INSERT INTO USERS  VALUES (5, 'Eve', 'Inactive');
INSERT INTO USERS  VALUES (6, 'Frank', 'Active');
INSERT INTO USERS  VALUES (7, 'Grace', 'Inactive');
INSERT INTO USERS  VALUES (8, 'Heidi', 'Active');
INSERT INTO USERS VALUES (9, 'Ivan', 'Inactive');
INSERT INTO USERS VALUES (10, 'Judy', 'Active');
INSERT INTO USERS VALUES (11, 'Isha', 'Active');

-- Logins Table 

INSERT INTO LOGINS  VALUES (1, '2023-07-15 09:30:00', 1001, 85);
INSERT INTO LOGINS VALUES (2, '2023-07-22 10:00:00', 1002, 90);
INSERT INTO LOGINS VALUES (3, '2023-08-10 11:15:00', 1003, 75);
INSERT INTO LOGINS VALUES (4, '2023-08-20 14:00:00', 1004, 88);
INSERT INTO LOGINS  VALUES (5, '2023-09-05 16:45:00', 1005, 82);

INSERT INTO LOGINS  VALUES (6, '2023-10-12 08:30:00', 1006, 77);
INSERT INTO LOGINS  VALUES (7, '2023-11-18 09:00:00', 1007, 81);
INSERT INTO LOGINS VALUES (8, '2023-12-01 10:30:00', 1008, 84);
INSERT INTO LOGINS  VALUES (9, '2023-12-15 13:15:00', 1009, 79);


-- 2024 Q1
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (1, '2024-01-10 07:45:00', 1011, 86);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (2, '2024-01-25 09:30:00', 1012, 89);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (3, '2024-02-05 11:00:00', 1013, 78);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (4, '2024-03-01 14:30:00', 1014, 91);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (5, '2024-03-15 16:00:00', 1015, 83);

INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (6, '2024-04-12 08:00:00', 1016, 80);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (7, '2024-05-18 09:15:00', 1017, 82);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (8, '2024-05-28 10:45:00', 1018, 87);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (9, '2024-06-15 13:30:00', 1019, 76);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (10, '2024-06-25 15:00:00', 1010, 92);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (10, '2024-06-26 15:45:00', 1020, 93);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (10, '2024-06-27 15:00:00', 1021, 92);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (10, '2024-06-28 15:45:00', 1022, 93);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (1, '2024-01-10 07:45:00', 1101, 86);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (3, '2024-01-25 09:30:00', 1102, 89);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (5, '2024-01-15 11:00:00', 1103, 78);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (2, '2023-11-10 07:45:00', 1201, 82);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (4, '2023-11-25 09:30:00', 1202, 84);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (6, '2023-11-15 11:00:00', 1203, 80);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (8, '2024-08-16 11:00:00', 1207, 80);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (6, '2024-09-15 11:00:00', 1204, 80);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (7, '2024-07-28 11:00:00', 1206, 80);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (6, '2024-09-28 11:00:00', 1205, 80);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (11, '2024-12-24 15:00:00', 1041, 92);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (11, '2024-12-25 15:45:00', 1042, 93);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (11, '2024-12-26 15:00:00', 1043, 92);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (11, '2024-12-27 15:45:00', 1044, 93);


-- -------------------------------------------------------------------------------------------------------------------------------
-- -------------------------------------------------------------------------------------------------------------------------------
SELECT * FROM USERS;
SELECT * FROM LOGINS;
-- -------------------------------------------------------------------------------------------------------------------------------
-- -------------------------------------------------------------------------------------------------------------------------------
-- 5 MONTHS BACK 2024-7-27
-- Q1. Which users did not log in during the past 5 months?
SELECT USER_ID,MAX(LOGIN_TIMESTAMP) AS MAX_LOGIN_TIMESTAMP -- DATE_SUB(NOW(), INTERVAL 5 MONTH) 
FROM LOGINS GROUP BY USER_ID
HAVING MAX(LOGIN_TIMESTAMP) < DATE_SUB(NOW(), INTERVAL 5 MONTH);

SELECT 
	DISTINCT l.USER_ID, u.USER_NAME
FROM
	LOGINS l
JOIN
	USERS u
ON
	l.USER_ID = u.USER_ID
WHERE
	u.USER_ID NOT IN(
    SELECT
		USER_ID
	FROM
		LOGINS
	WHERE
		LOGIN_TIMESTAMP > DATE_SUB(NOW(), INTERVAL 5 MONTH) );

-- Q2. How many users and sessions were there in each quarter, ordered from newest to oldest?
SELECT
	STR_TO_DATE(CONCAT(YEAR(LOGIN_TIMESTAMP), '-', (QUARTER(LOGIN_TIMESTAMP) - 1) * 3 + 1, '-01'), '%Y-%m-%d') AS first_quarter_date,
	-- MIN(LOGIN_TIMESTAMP),
	-- QUARTER(LOGIN_TIMESTAMP) AS QUARTER_LOGIN_TIMESTAMP,
    COUNT(*) AS session_count,
    COUNT(DISTINCT USER_ID) AS user_cnt
FROM
	LOGINS
GROUP BY
	QUARTER(LOGIN_TIMESTAMP),first_quarter_date
ORDER BY
	MIN(LOGIN_TIMESTAMP) desc;
-- Q3. Which users logged in during January 2024 but did not log in during November 2023?
SELECT * FROM LOGINS WHERE LOGIN_TIMESTAMP BETWEEN '2024-01-01' AND '2024-01-31'; -- logged in during January 2024 -- USER_ID - 1, 2, 3, 5
SELECT * FROM LOGINS WHERE LOGIN_TIMESTAMP BETWEEN '2023-11-01' AND '2023-11-30'; -- logged in during November 2023-- USER_ID - 7, 2, 4, 6
-- Main query for Q3
SELECT
	DISTINCT l.USER_ID , u.USER_NAME
FROM
	LOGINS l
JOIN
	USERS u
ON
	l.USER_ID = u.USER_ID
WHERE 
	LOGIN_TIMESTAMP BETWEEN '2024-01-01' AND '2024-01-31'
AND l.USER_ID NOT IN(SELECT USER_ID FROM LOGINS WHERE LOGIN_TIMESTAMP BETWEEN '2023-11-01' AND '2023-11-30');

-- Q4. What is the percentage change in sessions from the last quarter?
WITH CTE AS(SELECT
	STR_TO_DATE(CONCAT(YEAR(LOGIN_TIMESTAMP), '-', (QUARTER(LOGIN_TIMESTAMP) - 1) * 3 + 1, '-01'), '%Y-%m-%d') AS first_quarter_date,
	-- MIN(LOGIN_TIMESTAMP),
	-- QUARTER(LOGIN_TIMESTAMP) AS QUARTER_LOGIN_TIMESTAMP,
    COUNT(*) AS session_count,
    COUNT(DISTINCT USER_ID) AS user_cnt
FROM
	LOGINS
GROUP BY
	QUARTER(LOGIN_TIMESTAMP),first_quarter_date)

SELECT *,
	LAG(session_count,1) OVER(ORDER BY first_quarter_date ) AS prev_session_cnt,
    (session_count - (LAG(session_count,1) OVER(ORDER BY first_quarter_date ))) * 100/(LAG(session_count,1) OVER(ORDER BY first_quarter_date )) AS percentage_change
FROM
	CTE;
-- Q5. Which user had the highest session score each day?
WITH CTE AS(
SELECT USER_ID, convert(LOGIN_TIMESTAMP, date) AS login_date,
SUM(session_score) AS score
FROM LOGINS
GROUP BY USER_ID,  convert(LOGIN_TIMESTAMP, date)
ORDER BY  convert(LOGIN_TIMESTAMP, date), score desc)

SELECT * FROM(SELECT * , ROW_NUMBER() OVER(PARTITION BY login_date ORDER BY score desc) as rnk FROM CTE) a WHERE rnk = 1;

-- Q6. Which users have had a session every single day since their first login?
-- 27-12-2024
SELECT 
	USER_ID,
    MIN(DATE(LOGIN_TIMESTAMP)) AS first_login,
    DATEDIFF(NOW(), MIN(DATE(LOGIN_TIMESTAMP))) + 1 AS no_of_login_days_required,
    COUNT(DISTINCT DATE(LOGIN_TIMESTAMP)) AS no_of_login_days
FROM
	LOGINS
GROUP BY
	USER_ID
HAVING 
	DATEDIFF(NOW(), MIN(DATE(LOGIN_TIMESTAMP))) + 1 = COUNT(DISTINCT DATE(LOGIN_TIMESTAMP)) 
ORDER BY
	USER_ID;
	
-- Q7. On what dates were there no logins at all?
WITH RECURSIVE CTE AS(
SELECT 
	MIN(DATE(LOGIN_TIMESTAMP)) AS first_login_date,
    DATE(NOW()) AS last_date
	-- ,datediff(DATE(NOW()),MIN(DATE(LOGIN_TIMESTAMP))) + 1 AS TOTAL_NO_OF_DAYS -- 532 DAYS 
FROM
	LOGINS
UNION ALL
SELECT 
	DATE_ADD(first_login_date, INTERVAL 1 DAY),
    last_date
FROM
	CTE
WHERE
	first_login_date<last_date)
SELECT * FROM CTE WHERE first_login_date NOT IN(SELECT DISTINCT DATE(LOGIN_TIMESTAMP) FROM LOGINS) -- 34DAYS ACTIVE DATES
-- 532 - 34 = 498 DAYS